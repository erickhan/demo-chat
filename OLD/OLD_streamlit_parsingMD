import os
import streamlit as st
from streamlit import session_state as ss
from streamlit_pdf_viewer import pdf_viewer
from billpay import BillPaymentSystem
from openai import OpenAI
import io
import pypdf
from bill_parser import parse_markdown_bill_data, parse_bill_data 



def extract_text_from_pdf(pdf_bytes):
    """Extracts text from a PDF file."""
    try:
        pdf_reader = pypdf.PdfReader(io.BytesIO(pdf_bytes))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        st.error(f"Error extracting text from PDF: {e}")
        return None

def extract_number(text):
    """Extracts a number from a string, handling dollar signs and commas."""
    text = text.replace('$', '').replace(',', '').strip()
    try:
        return float(text)
    except ValueError:
        return None

# Set up header with a title on the left and a demo button on the right.
col1, col2 = st.columns([0.8, 0.2])
with col1:
    st.title("‚úâÔ∏è Send to Accounting-AI")
    st.write("Email simulate orchestrating an AI AccountsPayable Agent.")
with col2:
    ss.demo_mode = st.toggle("Demo Mode", value=False)

# Ensure session state keys exist
if "pdf_ref_guidance" not in ss:
    ss.pdf_ref_guidance = None
if "pdf_ref_toProcess" not in ss:
    ss.pdf_ref_toProcess = None
if "demo_mode" not in ss:
    ss.demo_mode = False

# If Demo Mode is enabled, pre-load files from the local working directory
if ss.demo_mode:
    current_working_dir = os.getcwd()
    demo_guidance_path = os.path.join(current_working_dir, "sample_files", "guidance.md") #changed to guidance.md
    demo_bill_path = os.path.join(current_working_dir, "sample_files", "APS_bill.md") #changed to APS_bill.md

    # Read files as bytes
    with open(demo_guidance_path, "rb") as f:
        ss.pdf_ref_guidance = f.read()
    with open(demo_bill_path, "rb") as f:
        ss.pdf_ref_toProcess = f.read()

# File for Guidance
with st.container():
    st.subheader("üìò Guidance File")
    if ss.demo_mode:
        st.success(f"üìÇ Demo File Loaded: guidance.pdf")
    else:
        guidance_file = st.file_uploader("Instructions file", type=('pdf'), key='pdf_guidance')
        if guidance_file is not None:
            ss.pdf_ref_guidance = guidance_file.getvalue() #store the bytes

    with st.expander("File Preview"):
        if ss.pdf_ref_guidance is not None:
            if ss.demo_mode:
                st.write("Guidance: guidance.md")
                st.write(f"  File size: {len(ss.pdf_ref_guidance)} bytes")
                try:
                    st.markdown(ss.pdf_ref_guidance.decode("utf-8", errors="ignore"))
                except Exception as e:
                    st.error(f"Failed to load Markdown: {e}")
            else:
                st.write("Guidance: Uploaded PDF")
                st.write("  File size:", len(ss.pdf_ref_guidance), "bytes")
                try:
                    pdf_viewer(input=ss.pdf_ref_guidance, width=700)
                except Exception as e:
                    st.error(f"Failed to load PDF: {e}")
                    st.info("Attempting to display as plain text.")
                    try:
                        st.text(ss.pdf_ref_guidance.decode("utf-8", errors="ignore"))
                    except:
                        st.error("Could not decode as text.")

st.divider()

# File for Processing
with st.container():
    st.subheader("üìë Bill to Process")
    if ss.demo_mode:
        st.success(f"üìÇ Demo File Loaded: bill_example_APS.pdf")
    else:
        toProcess_file = st.file_uploader("Bill to Process PDF file", type=('pdf'), key='pdf_toProcess')
        if toProcess_file is not None:
            ss.pdf_ref_toProcess = toProcess_file.read()
with st.expander("File Preview"):
    if ss.pdf_ref_toProcess is not None:
        if ss.demo_mode:
            st.write("Bill: APS_bill.md") 
            st.write(f"  File size: {len(ss.pdf_ref_toProcess)} bytes")
            try:
                st.markdown(ss.pdf_ref_toProcess.decode("utf-8", errors="ignore"))
            except Exception as e:
                st.error(f"Failed to load Markdown: {e}")
        else:
            st.write("Bill: Uploaded PDF")
            st.write("  File size:", len(ss.pdf_ref_toProcess), "bytes")
            try:
                pdf_viewer(input=ss.pdf_ref_toProcess, width=700)
            except Exception as e:
                st.error(f"Failed to load PDF: {e}")
                st.info("Attempting to display as plain text.")
                try:
                    st.text(ss.pdf_ref_toProcess.decode("utf-8", errors="ignore"))
                except Exception as decode_error:
                    st.error(f"Could not decode as text: {decode_error}")

st.divider()

# Show box if both files are available
if ss.pdf_ref_guidance is not None and ss.pdf_ref_toProcess is not None:
    with st.container():
        st.markdown("### ‚úÖ Ready to Send")
        st.info("Both files are available. Click **Process** to extract data and proceed.")
        if st.button("Process"):
            try:
                if ss.demo_mode:
                    text = ss.pdf_ref_toProcess.decode("utf-8")
                    if not text.strip():  # Check for empty or whitespace-only input
                        st.error("Error: Markdown text is empty.")
                        st.stop()
                    bill_data = parse_markdown_bill_data(text)
                    if bill_data is None:
                        st.error("Error parsing Markdown data. Please check the file format.")
                        st.stop()
                else:
                    pdf_text = extract_text_from_pdf(ss.pdf_ref_toProcess)
                    bill_data = parse_bill_data(extract_text_from_pdf(ss.pdf_ref_toProcess)) #parse PDF.
                # Detailed error checking
                errors = []
                if not bill_data["customer_name"]: # Changed "payee" to "customer_name"
                    errors.append("Customer Name not found.")
                if bill_data["previous_bill"] is None:
                    errors.append("Previous bill not found or could not be parsed.")
                if bill_data["payment"] is None:
                    errors.append("Payment not found or could not be parsed.")
                if bill_data["balance_forward"] is None:
                    errors.append("Balance forward not found or could not be parsed.")
                if bill_data["new_charges"] is None:
                    errors.append("New charges not found or could not be parsed.")
                if bill_data["total_amount_due"] is None:
                    errors.append("Total amount due not found or could not be parsed.")
                if not bill_data["due_date"]:
                    errors.append("Due date not found.")
                if not bill_data["received_date"]:
                    errors.append("Received date not found.")

                if errors:
                    for error in errors:
                        st.error(error)
                    st.stop()  # Stop execution if any errors were found

                # Initialize the system
                aps_bills = BillPaymentSystem("My Company")
                # Log in as the accountant
                aps_bills.set_current_user("jane.accountant", "AP Clerk")

                # Enter the APS bill information
                bill_id = aps_bills.enter_bill(
                    customer_name=bill_data["customer_name"],
                    previous_bill=bill_data["previous_bill"],
                    payment_amount=bill_data["payment"],
                    balance_forward=bill_data["balance_forward"],
                    amount_due=bill_data["total_amount_due"],
                    due_date=bill_data["due_date"],
                    received_date=bill_data["received_date"],
                    new_charges=bill_data["new_charges"],
                    attachment_path="aps_bill_scan.pdf"
                )

                # Verify the bill information
                aps_bills.verify_bill(bill_id, "Verified all information against original bill")
                # Schedule payment 90 days after due date
                aps_bills.schedule_payment(bill_id)
                # Submit for approval
                aps_bills.submit_for_approval(bill_id)

                # Display Status
                bill_info = aps_bills.get_bill(bill_id)
                if bill_info:
                    st.write(f"Bill: **{bill_id}** entered and scheduled for payment.")
                    st.write(f"Current status: **{bill_info['current_state']}**")
                    st.write(f"Scheduled payment date: **{bill_info['scheduled_payment_date']}**")
                    with open(aps_bills.csv_file_path, 'rb') as f:
                        st.download_button(
                            label="Download Bill Payments CSV",
                            data=f,
                            file_name="bill_payments.csv",
                            mime="text/csv"
                        )
                else:
                    st.warning("No data to process.")

            except Exception as e:
                st.error(f"Error processing Markdown: {e}")
st.divider()



# Ask user for their OpenAI API key via `st.text_input`.
openai_api_key = st.text_input("OpenAI API Key", type="password")
if not openai_api_key:
    st.info("Please add your OpenAI API key to continue.", icon="üóùÔ∏è")
else:
    client = OpenAI(api_key=openai_api_key)
    if "messages" not in st.session_state:
        st.session_state.messages = []
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    if prompt := st.chat_input("What is up?"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        stream = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages],
            stream=True,
        )
        full_response = ""
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            for chunk in stream:
                if chunk.choices[0].delta.content is not None:
                    full_response += chunk.choices[0].delta.content